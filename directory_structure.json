{
  "util":{
    "d.lua":{
      "content":""
    },
    "model":[],
    "deserialize.lua":{
      "content":"local lfs = require(\"lfs\")\nlocal json = require(\"dkjson\")\n\nlocal json_string = [[\n{\n  \"test.lua\":{\n    \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_file_content(path)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function deserialize_directory(directory)\\n    for key, value in pairs(directory) do\\n        if (value[\\\"content\\\"]) then\\n            -- print(key, value[\\\"content\\\"])\\n            print(key)\\n        else\\n            deserialize_directory(value)\\n        end\\n        -- print(key, value)\\n    end\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local serialized = serialize_directory(repo_path)\\n    deserialize_directory(serialized)\\nend\\n\\nmain()\"\n  },\n  \"util\":{\n    \"a.lua\":{\n      \"content\":\"\"\n    },\n    \"d.lua\":{\n      \"content\":\"\"\n    },\n    \"deserialize.lua\":{\n      \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_json(json)\\n    return json.decode(json)\\nend\\n\\nlocal function create_module_script(content)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local serialized = serialize_directory(repo_path)\\n    print(json.encode(serialized, { indent = true }))\\nend\\n\\nmain()\"\n    },\n    \"model\":[]\n  },\n  \"serialize.lua\":{\n    \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_file_content(path)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function save_json_to_file(data, filename)\\n    local file = io.open(filename, \\\"w\\\")\\n    if not file then\\n        error(\\\"Unable to open file for writing: \\\" .. filename)\\n    end\\n    file:write(data)\\n    file:close()\\n    print(\\\"JSON data saved to: \\\" .. filename)\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local output_file = arg[2] or \\\"directory_structure.json\\\"\\n\\n    local serialized = serialize_directory(repo_path)\\n    local json_string = json.encode(serialized, { indent = true })\\n    save_json_to_file(json_string, output_file)\\nend\\n\\nmain()\"\n  }\n}\n]]\n\nlocal function read_json(json)\n    return json.decode(json)\nend\n\nlocal function create_module_script(content)\n    local file = io.open(path, \"r\")\n    if not file then return nil end\n    local content = file:read(\"*all\")\n    file:close()\n    return content\nend\n\nlocal function serialize_directory(path)\n    local result = {}\n    for file in lfs.dir(path) do\n        if file ~= \".\" and file ~= \"..\" then\n            local full_path = path .. \"/\" .. file\n            if is_directory(full_path) then\n                result[file] = serialize_directory(full_path)\n            else\n                if is_lua_file(full_path) then\n                    result[file] = {\n                        content = read_file_content(full_path)\n                    }\n                end\n            end\n        end\n    end\n    return result\nend\n\nlocal function main()\n    local repo_path = arg[1] or \".\"\n    local serialized = serialize_directory(repo_path)\n    print(json.encode(serialized, { indent = true }))\nend\n\nmain()"
    },
    "a.lua":{
      "content":""
    }
  },
  "test.lua":{
    "content":"local lfs = require(\"lfs\")\nlocal json = require(\"dkjson\")\n\nlocal json_string = [[\n{\n  \"test.lua\":{\n    \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_file_content(path)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function deserialize_directory(directory)\\n    for key, value in pairs(directory) do\\n        if (value[\\\"content\\\"]) then\\n            -- print(key, value[\\\"content\\\"])\\n            print(key)\\n        else\\n            deserialize_directory(value)\\n        end\\n        -- print(key, value)\\n    end\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local serialized = serialize_directory(repo_path)\\n    deserialize_directory(serialized)\\nend\\n\\nmain()\"\n  },\n  \"util\":{\n    \"a.lua\":{\n      \"content\":\"\"\n    },\n    \"d.lua\":{\n      \"content\":\"\"\n    },\n    \"deserialize.lua\":{\n      \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_json(json)\\n    return json.decode(json)\\nend\\n\\nlocal function create_module_script(content)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local serialized = serialize_directory(repo_path)\\n    print(json.encode(serialized, { indent = true }))\\nend\\n\\nmain()\"\n    },\n    \"model\":[]\n  },\n  \"serialize.lua\":{\n    \"content\":\"local lfs = require(\\\"lfs\\\")\\nlocal json = require(\\\"dkjson\\\")\\n\\nlocal function is_directory(path)\\n    return lfs.attributes(path, \\\"mode\\\") == \\\"directory\\\"\\nend\\n\\nlocal function is_lua_file(path)\\n    return path:match(\\\"%.lua$\\\") or path:match(\\\"%.luau$\\\")\\nend\\n\\nlocal function read_file_content(path)\\n    local file = io.open(path, \\\"r\\\")\\n    if not file then return nil end\\n    local content = file:read(\\\"*all\\\")\\n    file:close()\\n    return content\\nend\\n\\nlocal function serialize_directory(path)\\n    local result = {}\\n    for file in lfs.dir(path) do\\n        if file ~= \\\".\\\" and file ~= \\\"..\\\" then\\n            local full_path = path .. \\\"/\\\" .. file\\n            if is_directory(full_path) then\\n                result[file] = serialize_directory(full_path)\\n            else\\n                if is_lua_file(full_path) then\\n                    result[file] = {\\n                        content = read_file_content(full_path)\\n                    }\\n                end\\n            end\\n        end\\n    end\\n    return result\\nend\\n\\nlocal function save_json_to_file(data, filename)\\n    local file = io.open(filename, \\\"w\\\")\\n    if not file then\\n        error(\\\"Unable to open file for writing: \\\" .. filename)\\n    end\\n    file:write(data)\\n    file:close()\\n    print(\\\"JSON data saved to: \\\" .. filename)\\nend\\n\\nlocal function main()\\n    local repo_path = arg[1] or \\\".\\\"\\n    local output_file = arg[2] or \\\"directory_structure.json\\\"\\n\\n    local serialized = serialize_directory(repo_path)\\n    local json_string = json.encode(serialized, { indent = true })\\n    save_json_to_file(json_string, output_file)\\nend\\n\\nmain()\"\n  }\n}\n]]\n\nlocal function read_json(json)\n    return json.decode(json, 1)\nend\n\nlocal function create_module_script(content)\n    local file = io.open(path, \"r\")\n    if not file then return nil end\n    local content = file:read(\"*all\")\n    file:close()\n    return content\nend\n\nlocal function deserialize_directory(directory)\n    for key, value in pairs(directory) do\n        if (value[\"content\"]) then\n            -- print(key, value[\"content\"])\n            print(key)\n        else\n            deserialize_directory(value)\n        end\n        -- print(key, value)\n    end\nend\n\nlocal function main()\n    local root = read_json(json_string)\n    deserialize_directory(root)\nend\n\nmain()"
  },
  "serialize.lua":{
    "content":"local lfs = require(\"lfs\")\nlocal json = require(\"dkjson\")\n\nlocal function is_directory(path)\n    return lfs.attributes(path, \"mode\") == \"directory\"\nend\n\nlocal function is_lua_file(path)\n    return path:match(\"%.lua$\") or path:match(\"%.luau$\")\nend\n\nlocal function read_file_content(path)\n    local file = io.open(path, \"r\")\n    if not file then return nil end\n    local content = file:read(\"*all\")\n    file:close()\n    return content\nend\n\nlocal function serialize_directory(path)\n    local result = {}\n    for file in lfs.dir(path) do\n        if file ~= \".\" and file ~= \"..\" then\n            local full_path = path .. \"/\" .. file\n            if is_directory(full_path) then\n                result[file] = serialize_directory(full_path)\n            else\n                if is_lua_file(full_path) then\n                    result[file] = {\n                        content = read_file_content(full_path)\n                    }\n                end\n            end\n        end\n    end\n    return result\nend\n\nlocal function save_json_to_file(data, filename)\n    local file = io.open(filename, \"w\")\n    if not file then\n        error(\"Unable to open file for writing: \" .. filename)\n    end\n    file:write(data)\n    file:close()\n    print(\"JSON data saved to: \" .. filename)\nend\n\nlocal function main()\n    local repo_path = arg[1] or \".\"\n    local output_file = arg[2] or \"directory_structure.json\"\n\n    local serialized = serialize_directory(repo_path)\n    local json_string = json.encode(serialized, { indent = true })\n    print(json_string)\n    local table = json.decode(json_string)\n    save_json_to_file(json_string, output_file)\nend\n\nmain()"
  }
}